# /etc/nftables.conf
# Firewall rules, applied on startup by `nftables.service` (nftables package)
#
# Manual reload after change: nft -f /etc/nftables.conf
# Show current rules:
#  - nft list tables
#  - nft list table inet filter
#  - nft list table ip nat
#
# For more documentation see: man nft

flush ruleset

# Interfaces
define nic_wan = "wan"
define nic_management = "vlan_default"
define nic_servers = "vlan_server"
define nic_trusted = "vlan_trusted"
define nic_iot = "vlan_iot"
define nic_guest = "vlan_guest"
define nic_wireguard = "wg0"

# Networks
define net_ipv4_management = 10.240.1.0/24
define net_ipv4_servers = 10.240.2.0/24
define net_ipv4_trusted = 10.240.3.0/24
# Note: /23 -- 512 addresses, 10.240.4, 10.240.5
define net_ipv4_iot = 10.240.4.0/23
define net_ipv4_guest = 10.240.6.0/24
define net_ipv4_wireguard = 10.240.7.0/24

# Servers
# To define multiple, comma-separate the IPs/ranges:
#   { 10.240.2.8/32, 10.240.2.9/32 }
define server_dns = { 10.240.2.8/32 }
define server_dns_v6 = { 2001:0db8:2::8/128, 2001:0db8:2::9/128 }

# Filter table for "inet" = IP + IPv6
table inet filter {
    # Define a set that defines what "DNS traffic" is
    # (tcp/udp to to port 'domain' (53), see /etc/services)
    set dns_ok {
        type inet_proto . inet_service
        counter
        elements = {
            tcp . domain,  # DNS (TCP)
            udp . domain   # DNS (UDP)
        }
    }

    # Create a chain of firewall rules that allows traffic to the
    # DNS servers as defined above
    chain allow_dns {
        ip daddr $server_dns meta l4proto . th dport @dns_ok accept
        ip6 daddr $server_dns_v6 meta l4proto . th dport @dns_ok accept
    }

    # Global chain, used for incoming and forwarded traffic
    chain global {
        # Accept/drop packets based on connection tracker state
        ct state vmap {
            established : accept,
            related : accept,
            invalid : drop
        }
        # Allow DNAT (port-forwarded) traffic
        ct status dnat counter accept

        # Allow ICMP for v4 and v6
        ip protocol icmp counter accept
        ip6 nexthdr icmpv6 counter accept
    }

    # Per interface chains: incoming traffic from "trusted" and outgoing
    # traffic through the WAN interface.
    # Anything not matched in these is dropped, as the default action.
    chain management_in {
        # Only traffic from the "trusted" net can go to "management",
        # and only on the designated ports
        iifname { $nic_trusted } tcp dport { 22, 443 } counter accept
    }
    chain management_wan_out {
        ct state new counter accept
    }

    chain servers_in {
        # All non-guest networks can talk to servers
        iifname { $nic_trusted, $nic_iot, $nic_wireguard } ct state new counter accept

        # WAN can't talk to DNS
        iifname != $nic_wan jump allow_dns

        # Regular firewall rules to allow access to several services from outside
        # over IPv6

        # Web
        ip6 daddr 2001:0db8:2::100 tcp dport { 80, 443 } accept

        # etc.
    }
    chain servers_wan_out {
        ct state new counter accept
    }

    chain trusted_in {
        # Only servers can create new connections to the "trusted" net
        iifname { $nic_servers, $nic_wireguard } ct state new counter accept
    }
    chain trusted_wan_out {
        ct state new counter accept
    }

    chain iot_in {
        # IoT device network can be connected to from here:
        iifname { $nic_servers, $nic_trusted, $nic_wireguard } ct state new counter accept
    }
    chain iot_wan_out {
        ct state new counter accept
    }

    chain guest_in {
        # Guest is isolated -- no connections in
        counter
    }
    chain guest_wan_out {
        ct state new counter accept
    }

    chain wireguard_in {
        # Wireguard is also isolated -- no connections to VPN clients
        # (connections from the wg net to other nets are defined in the other
        # nets' `_io` chain)
        counter
    }
    chain wireguard_wan_out {
        ct state new counter accept;
        # Wireguard needs some bytes in a packet to do its thing.
        # This means Wireguard-tunnelled packets have to be smaller.
        # This forces the TCP "max segment size" to be no higher
        # than the interface MTU.
        tcp flags syn tcp option maxseg size set rt mtu;
    }

    # Forward chain: traffic that is going to be forwarded by this router
    chain forward {
        type filter hook forward priority 0;
        policy drop;

        # Process global rules first
        jump global

        # A `vmap` is a lookup table - here it looks up the "outbound" interface
        # and jumps to its chain for firewall rule processing
        oifname vmap {
            $nic_management : jump management_in,
            $nic_servers : jump servers_in,
            $nic_trusted : jump trusted_in,
            $nic_iot : jump iot_in,
            $nic_guest : jump guest_in,
            $nic_wireguard : jump wireguard_in,
        }

        # If the "out interface" is the WAN interface, a different lookup table
        # is used:
        oifname $nic_wan iifname vmap {
            $nic_management : jump management_wan_out,
            $nic_servers : jump servers_wan_out,
            $nic_trusted : jump trusted_wan_out,
            $nic_iot : jump iot_wan_out,
            $nic_guest : jump guest_wan_out,
            $nic_wireguard : jump wireguard_wan_out,
        }
    }

    # Input chain: traffic destined for this machine
    chain input {
        type filter hook input priority 0;
        policy drop;
    
        jump global
        # Rules for traffic directed to the firewall host itself go here
        iif lo counter accept

        # Incoming DHCP from clients (explicitly excludes WAN)
        iifname != $nic_wan ip protocol . th dport vmap { udp . 67 : accept }
        
        # DHCPv6 (response from ISP with PD prefix; accepts it on the link-local address only)
        ip6 saddr fe80::/10 ip6 daddr fe80::/10 udp sport 547 udp dport 546 accept

        # Allow incoming wireguard
        ip protocol . th dport vmap { udp . 51820 : accept }

        # Allow incoming SSH from trusted net
        iifname { $nic_trusted } tcp dport 22 ct state new counter accept
    }
}

table nat {
    chain prerouting {
        type nat hook prerouting priority -100;
        policy accept;

        # IPv4 DNAT (port forwarding) rules, that redirect
        # traffic to internal services. Make sure those are
        # secured!
        iifname $nic_wan dnat ip addr . port to tcp dport map {
            80  : 10.240.2.100 . 80,     # Webserver: HTTP
            443 : 10.240.2.100 . 443,    # Webserver: HTTPS
            # etc.
        }
    }

    chain postrouting {
        type nat hook postrouting priority 100;
        policy accept;

        # Source NAT ("masquerading")
        # This enables sharing a single IPv4 WAN IP for all internal
        # networks.
        ip saddr {
            $net_ipv4_management,
            $net_ipv4_servers,
            $net_ipv4_trusted,
            $net_ipv4_iot,
            $net_ipv4_guest,
            $net_ipv4_wireguard,
        } oifname $nic_wan masquerade
    }
}
